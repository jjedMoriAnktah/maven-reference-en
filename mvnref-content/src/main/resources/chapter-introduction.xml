<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.discursive.com/docbook/xml/4.5/docbookx.dtd">
<chapter id="introduction">
  <title>Introducing Apache Maven</title>

  <para>Although there are a number of references for Maven online, there is
  no single, well-written narrative for introducing Maven that can serve as
  both an authoritative reference and an introduction. What we’ve tried to do
  with this effort is provide such a narrative coupled with useful reference
  material.</para>

  <section id="introduction-sect-whatIsMaven">
    <title>Maven... What is it?</title>

    <para><indexterm>
        <primary>Apache Maven</primary>

        <secondary>definition of</secondary>
      </indexterm>The answer to this question depends on your own perspective.
    The great majority of Maven users are going to call Maven a “build tool”:
    a tool used to build deployable artifacts from source code. Build
    engineers and project managers might refer to Maven as something more
    comprehensive: a project management tool. What is the difference? A build
    tool such as Ant is focused solely on preprocessing, compilation,
    packaging, testing, and distribution. A project management tool such as
    Maven provides a superset of features found in a build tool. In addition
    to providing build capabilities, Maven can also run reports, generate a
    web site, and facilitate communication among members of a working
    team.</para>

    <para>A more formal definition of <ulink
    url="http://maven.apache.org">Apache Maven</ulink>: Maven is a project
    management tool which encompasses a project object model, a set of
    standards, a project lifecycle, a dependency management system, and logic
    for executing plugin goals at defined phases in a lifecycle. When you use
    Maven, you describe your project using a well-defined project object
    model, Maven can then apply cross-cutting logic from a set of shared (or
    custom) plugins.</para>

    <para>Don't let the fact that Maven is a "project management" tool scare
    you away. If you were just looking for a build tool, Maven will do the
    job. In fact, the first few chapters of this book will deal with the most
    common use case: using Maven to build and distribute your project.</para>
  </section>

  <section id="installation-sect-conventionConfiguration">
    <title>Convention Over Configuration</title>

    <para><indexterm>
        <primary>convention over configuration</primary>
      </indexterm>Convention over configuration is a simple concept. Systems,
    libraries, and frameworks should assume reasonable defaults. Without
    requiring unnecessary configuration, systems should "just work". Popular
    frameworks such as <ulink url="http://www.rubyonrails.org/">Ruby on
    Rails</ulink> and <acronym>EJB3</acronym> have started to adhere to these
    principles in reaction to the configuration complexity of frameworks such
    as the initial <acronym>EJB</acronym> 2.1 specifications. An illustration
    of convention over configuration is something like <acronym>EJB3</acronym>
    persistence: all you need to do to make a particular bean persistent is to
    annotate that class with <classname>@Entity. </classname> The framework
    assumes table and column names based on the name of the class and the
    names of the properties. Hooks are provided for you to override these
    default, assumed names if the need arises, but, in most cases, you will
    find that using the framework-supplied defaults results in a faster
    project execution.</para>

    <para>Maven incorporates this concept by providing sensible default
    behavior for projects. Without customization, source code is assumed to be
    in <filename>\${basedir}/src/main/java</filename> and resources are
    assumed to be in <filename>\${basedir}/src/main/resources</filename>.
    Tests are assumed to be in <filename>\${basedir}/src/test</filename>, and
    a project is assumed to produce a <acronym>JAR</acronym> file. Maven
    assumes that you want the compile byte code to
    <filename>\${basedir}/target/classes</filename> and then create a
    distributable <acronym>JAR</acronym> file in
    <filename>\${basedir}/target</filename>. While this might seem trivial,
    consider the fact that most Ant-based builds have to define the locations
    of these directories. Ant doesn't ship with any built-in idea of where
    source code or resources might be in a project; you have to supply this
    information. Maven's adoption of convention over configuration goes
    farther than just simple directory locations, Maven's core plugins apply a
    common set of conventions for compiling source code, packaging
    distributions, generating web sites, and many other processes. Maven's
    strength comes from the fact that it is "opinionated", it has a defined
    life-cycle and a set of common plugins that know how to build and assemble
    software. If you follow the conventions, Maven will require almost zero
    effort - just put your source in the correct directory, and Maven will
    take care of the rest.</para>

    <para>One side-effect of using systems that follow "convention over
    configuration" is that end-users might feel that they are forced to use a
    particular methodology or approach. While it is certainly true that Maven
    has some core opinions that shouldn't be challenged, most of the defaults
    can be customized. For example, the location of a project's source code
    and resources can be customized, names of <acronym>JAR</acronym> files can
    be customized, and through the development of custom plugins, almost any
    behavior can be tailored to your specific environment's requirements. If
    you don't care to follow convention, Maven will allow you to customize
    defaults in order to adapt to your specific requirements.</para>
  </section>

  <section id="installation-sect-common-interface">
    <title>A Common Interface</title>

    <para><indexterm>
        <primary>common interface</primary>
      </indexterm>Before Maven provided a common interface for building
    software, every single project had someone dedicated to managing a fully
    customized build system. Developers had to take time away from developing
    software to learn about the idiosyncrasies of each new project they wanted
    to contribute to. In 2001, you'd have a completely different approach to
    building a project like <ulink
    url="http://turbine.apache.org/">Turbine</ulink> than you would to
    building a project like <ulink
    url="http://tomcat.apache.org">Tomcat</ulink>. If a new source code
    analysis tool came out that would perform static analysis on source code,
    or if someone developed a new unit testing framework, everybody would have
    to drop what they were doing and figure out how to fit it into each
    project's custom build environment. How do you run unit tests? There were
    a thousand different answers. This environment was characterized by a
    thousand endless arguments about tools and build procedures. The age
    before Maven was an age of inefficiency, the age of the "Build
    Engineer".</para>

    <para>Today, most open source developers have used or are currently using
    Maven to manage new software projects. This transition is less about
    developers moving from one build tool to another and more about developers
    starting to adopt a common interface for project builds. As software
    systems have become more modular, build systems have become more complex,
    and the number of projects has sky-rocketed. Before Maven, when you wanted
    to check out a project like <ulink url="http://activemq.apache.org">Apache
    ActiveMQ</ulink> or <ulink url="http://servicemix.apache.org">Apache
    ServiceMix</ulink> from Subversion and build it from source, you really
    had to set aside about an hour to figure out the build system for each
    particular project. What does the project need to build? What libraries do
    I need to download? Where do I put them? What goals can I execute in the
    build? In the best case, it took a few minutes to figure out a new
    project's build, and in the worst cases (like the old Servlet API
    implementation in the Jakarta Project), a project's build was so difficult
    it would take multiple hours just to get to the point where a new
    contributor could edit source and compile the project. These days, you
    check it out from source, and you run <command>mvn
    install</command>.</para>

    <para>While Maven provides an array of benefits including dependency
    management and reuse of common build logic through plugins, the core
    reason why it has succeeded is that it has defined a common interface for
    building software. When you see that a project like <ulink
    url="http://wicket.apache.org">Apache ActiveMQ</ulink> uses Maven, you can
    assume that you'll be able to check it out from source and build it with
    <command>mvn install</command> without much hassle. You know where the
    ignition keys goes, you know that the gas pedal is on the right-side, and
    the brake is on the left.</para>
  </section>

  <section id="installation-sect-universal-reuse">
    <title>Universal Reuse through Maven Plugins</title>

    <para><indexterm>
        <primary>universal reuse</primary>
      </indexterm>The core of Maven is pretty dumb, it doesn't know how to do
    much beyond parsing a few <acronym>XML</acronym> documents and keeping
    track of a lifecycle and a few plugins. Maven has been designed to
    delegate most responsibility to a set of Maven Plugins which can affect
    the Maven Lifecycle and offer access to goals. Most of the action in Maven
    happens in plugin goals which take care of things like compiling source,
    packaging bytecode, publishing sites, and any other task which need to
    happen in a build. The Maven you download from Apache doesn't know much
    about packaging a <acronym>WAR</acronym> file or running JUnit tests; most
    of the intelligence of Maven is implemented in the plugins and the plugins
    are retrieved from the Maven Repository. In fact, the first time you ran
    something like <command>mvn install</command> with a brand-new Maven
    installation it retrieved most of the core Maven plugins from the Central
    Maven Repository. This is more than just a trick to minimize the download
    size of the Maven distribution, this is behavior which allows you to
    upgrade a plugin to add capability to your project's build. The fact that
    Maven retrieves both dependencies and plugins from the remote repository
    allows for universal reuse of build logic.</para>

    <para>The Maven Surefire plugin is the plugin that is responsible for
    running unit tests. Somewhere between version 1.0 and the version that is
    in wide use today someone decided to add support for the TestNG unit
    testing framework in addition to the support for JUnit. This upgrade
    happened in a way that didn't break backwards compatibility. If you were
    using the Surefire plugin to compile and execute JUnit 3 unit tests, and
    you upgraded to the most recent version of the Surefire plugin, your tests
    continued to execute without fail. But, you gained new functionality, if
    you want to execute unit tests in TestNG you now have that ability. You
    also gained the ability to run annotated JUnit 4 unit tests. You gained
    all of these capabilities without having to upgrade your Maven
    installation or install new software. Most importantly, nothing about your
    project had to change aside from a version number for a plugin a single
    Maven configuration file called the Project Object Model (POM).</para>

    <para>It is this mechanism that affects much more than the Surefire
    plugin. Maven has plugins for everything from compiling Java code, to
    generating reports, to deploying to an application server. Maven has
    abstracted common build tasks into plugins which are maintained centrally
    and shared universally. If the state-of-the-art changes in any area of the
    build, if some new unit testing framework is released or if some new tool
    is made available, you don't have to be the one to hack your project's
    custom build system to support it. You benefit from the fact that plugins
    are downloaded from a remote repository and maintained centrally. This is
    what is meant by universal reuse through Maven plugins.</para>
  </section>

  <section id="installation-sect-conceptual">
    <title>Conceptual Model of a "Project"</title>

    <para><indexterm>
        <primary>Project Object Model (POM)</primary>
      </indexterm>Maven maintains a model of a project. You are not just
    compiling source code into bytecode, you are developing a description of a
    software project and assigning a unique set of coordinates to a project.
    You are describing the attributes of the project. What is the project's
    license? Who develops and contributes to the project? What other projects
    does this project depend upon? Maven is more than just a "build tool", it
    is more than just an improvement on tools like make and Ant, it is a
    platform that encompasses a new semantics related to software projects and
    software development. This definition of a model for every project enables
    such features as:</para>

    <variablelist>
      <varlistentry>
        <term>Dependency Management</term>

        <listitem>
          <para><indexterm>
              <primary>dependency management</primary>
            </indexterm>Because a project is defined by a unique set of
          coordinates consisting of a group identifier, an artifact
          identifier, and a version, projects can now use these coordinates to
          declare dependencies.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Remote Repositories</term>

        <listitem>
          <para><indexterm>
              <primary>remote repositories</primary>
            </indexterm>Related to dependency management, we can use the
          coordinates defined in the Maven Project Object Model
          (<acronym>POM</acronym>) to create repositories of Maven
          artifacts.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Universal Reuse of Build Logic</term>

        <listitem>
          <para><indexterm>
              <primary>universal reuse</primary>
            </indexterm>Plugins contain logic that works with the descriptive
          data and configuration parameters defined in Project Object Model
          (<acronym>POM</acronym>); they are not designed to operate upon
          specific files in known locations.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Tool Portability / Integration</term>

        <listitem>
          <para><indexterm>
              <primary>IDE integration</primary>
            </indexterm>Tools like Eclipse, NetBeans, and IntelliJ now have a
          common place to find information about a project. Before the advent
          of Maven, every <acronym>IDE</acronym> had a different way to store
          what was essentially a custom Project Object Model
          (<acronym>POM</acronym>). Maven has standardized this description,
          and while each IDE continues to maintain custom project files, they
          can be easily generated from the model.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Easy Searching and Filtering of Project Artifacts</term>

        <listitem>
          <para><indexterm>
              <primary>searching for artifacts</primary>
            </indexterm>Tools like Nexus allow you to index and search the
          contents of a repository using the information stored in the
          <acronym>POM</acronym>.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="installation-sect-mavenAlternativeAnt">
    <title>Is Maven an alternative to XYZ?</title>

    <para><indexterm>
        <primary>Apache Ant</primary>
      </indexterm><indexterm>
        <primary>Apache Maven</primary>

        <secondary>comparison to Ant</secondary>
      </indexterm>So, sure, Maven is an alternative to Ant, but <ulink
    url="http://ant.apache.org">Apache Ant</ulink> continues to be a great,
    widely-used tool. It has been the reigning champion of Java builds for
    years, and you can integrate Ant build scripts with your project's Maven
    build very easily. This is a common usage pattern for a Maven project. On
    the other hand, as more and more open source projects move to Maven as a
    project management platform, working developers are starting to realize
    that Maven not only simplifies the task of build management, it is helping
    to encourage a common interface between developers and software projects.
    Maven is more of a platform than a tool, while you could consider Maven an
    alternative to Ant, you are comparing apples to oranges. "Maven" includes
    more than just a build tool.</para>

    <para>This is the central point that makes all of the Maven vs. Ant, Maven
    vs. Buildr, Maven vs. Gradle arguments irrelevant. Maven isn't totally
    defined by the mechanics of your build system. It isn't about scripting
    the various tasks in your build as much as it is about encouraging a set
    of standards, a common interface, a life-cycle, a standard repository
    format, a standard directory layout, etc. It certainly isn't about what
    format the <acronym>POM</acronym> happens to be in <acronym>(XML</acronym>
    vs. <acronym>YAML</acronym> vs. Ruby). Maven is much larger than that, and
    Maven refers to much more than the tool itself. When this book talks of
    Maven, it is referring to the constellation of software, systems, and
    standards that support it. Buildr, Ivy, Gradle, all of these tools
    interact with the repository format that Maven helped create, and you
    could just as easily use a repository manager like Nexus to support a
    build written entirely in Ant.</para>

    <para>While Maven is an alternative to many of these tools, the community
    needs to evolve beyond seeing technology as a zero-sum game between
    unfriendly competitors in a competition for users and developers. This
    might be how large corporations relate to one another, but it has very
    little relevance to the way that open source communities work. The
    headline "Who's winning? Ant or Maven?" isn't very constructive. If you
    force us to answer this question, we're definitely going to say that Maven
    is a superior alternative to Ant as a foundational technology for a build;
    at the same time, Maven's boundaries are constantly shifting and the Maven
    community is constantly trying to seek out new ways to become more
    ecumenical, more inter-operable, more cooperative. The core tenets of
    Maven are declarative builds, dependency management, repository managers,
    universal reuse through plugins, but the specific incarnation of these
    ideas at any given moment is less important than the sense that the open
    source community is collaborating to reduce the inefficiency of
    "enterprise-scale builds".</para>
  </section>

  <section id="installation-sect-compare-ant-maven">
    <title>Comparing Maven with Ant</title>

    <para><indexterm>
        <primary>Apache Maven</primary>

        <secondary>comparison to Ant</secondary>
      </indexterm>The authors of this book have no interest in creating a feud
    between Apache Ant and Apache Maven, but we are also cognizant of the fact
    that most organizations have to make a decision between the two standard
    solutions: Apache Ant and Apache Maven. In this section, we compare and
    contrast the tools.</para>

    <para>Ant excels at build process, it is a build system modeled after make
    with targets and dependencies. Each target consists of a set of
    instructions which are coded in <acronym>XML</acronym>. There is a
    <sgmltag>copy</sgmltag> task and a <sgmltag>javac</sgmltag> task as well
    as a <sgmltag>jar</sgmltag> task. When you use Ant, you supply Ant with
    specific instructions for compiling and packaging your output. Look at the
    following example of a simple <filename>build.xml</filename>
    file:<indexterm>
        <primary>Apache Ant</primary>

        <secondary>build.xml</secondary>
      </indexterm></para>

    <example id="ex-ant-sample">
      <title>A Simple Ant build.xml file</title>

      <programlisting language="xml">&lt;project name="my-project" default="dist" basedir="."&gt;
    &lt;description&gt;
        simple example build file
    &lt;/description&gt;
  &lt;!-- set global properties for this build --&gt;
  &lt;property name="src" location="src/main/java"/&gt;
  &lt;property name="build" location="target/classes"/&gt;
  &lt;property name="dist"  location="target"/&gt;

  &lt;target name="init"&gt;
    &lt;!-- Create the time stamp --&gt;
    &lt;tstamp/&gt;
    &lt;!-- Create the build directory structure used by compile --&gt;
    &lt;mkdir dir="\${build}"/&gt;
  &lt;/target&gt;

  &lt;target name="compile" depends="init"
        description="compile the source " &gt;
    &lt;!-- Compile the java code from \${src} into \${build} --&gt;
    &lt;javac srcdir="\${src}" destdir="\${build}"/&gt;
  &lt;/target&gt;

  &lt;target name="dist" depends="compile"
        description="generate the distribution" &gt;
    &lt;!-- Create the distribution directory --&gt;
    &lt;mkdir dir="\${dist}/lib"/&gt;

    &lt;!-- Put everything in \${build} into the MyProject-\${DSTAMP}.jar file --&gt;
    &lt;jar jarfile="\${dist}/lib/MyProject-\${DSTAMP}.jar" basedir="\${build}"/&gt;
  &lt;/target&gt;

  &lt;target name="clean"
        description="clean up" &gt;
    &lt;!-- Delete the \${build} and \${dist} directory trees --&gt;
    &lt;delete dir="\${build}"/&gt;
    &lt;delete dir="\${dist}"/&gt;
  &lt;/target&gt;
&lt;/project&gt;</programlisting>
    </example>

    <para>In this simple Ant example, you can see how you have to tell Ant
    exactly what to do. There is a compile goal which includes the
    <varname>javac</varname> task that compiles the source in the
    <filename>src/main/java</filename> directory to the
    <filename>target/classes</filename> directory. You have to tell Ant
    exactly where your source is, where you want the resulting bytecode to be
    stored, and how to package this all into a <acronym>JAR</acronym> file.
    While there are some recent developments that help make Ant less
    procedural, a developer's experience with Ant is in coding a procedural
    language written in <acronym>XML</acronym>.</para>

    <para>Contrast the previous Ant example with a Maven example. In Maven, to
    create a JAR file from some Java source, all you need to do is create a
    simple <filename>pom.xml</filename>, place your source code in
    <filename>\${basedir}/src/main/java</filename> and then run <command>mvn
    install</command> from the command line. The example Maven
    <filename>pom.xml</filename> that achieves the same results as the simple
    Ant file listed in <xref linkend="ex-ant-sample" /> is shown in <xref
    linkend="ex-maven-sample" />.<indexterm>
        <primary>Apache Maven</primary>

        <secondary>pom.xml</secondary>
      </indexterm></para>

    <example id="ex-maven-sample">
      <title>A Sample Maven pom.xml</title>

      <programlisting language="xml">&lt;project&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mavenbook&lt;/groupId&gt;
  &lt;artifactId&gt;my-project&lt;/artifactId&gt;
  &lt;version&gt;1.0&lt;/version&gt;
&lt;/project&gt;</programlisting>
    </example>

    <para>That's all you need in your <filename>pom.xml</filename>. Running
    <command>mvn install</command> from the command line will process
    resources, compile source, execute unit tests, create a
    <acronym>JAR</acronym>, and install the <acronym>JAR</acronym> in a local
    repository for reuse in other projects. Without modification, you can run
    <command>mvn site</command> and then find an
    <filename>index.html</filename> file in <filename>target/site</filename>
    that contains links to JavaDoc and a few reports about your source
    code.</para>

    <para>Admittedly, this is the simplest possible example project containing
    nothing more than some source code and producing a simple
    <acronym>JAR</acronym>. It is a project which closely follows Maven
    conventions and doesn't require any dependencies or customization. If we
    wanted to start customizing the behavior, our <filename>pom.xml</filename>
    is going to grow in size, and in the largest of projects you can see
    collections of very complex Maven <acronym>POM</acronym>s which contain a
    great deal of plugin customization and dependency declarations. But, even
    when your project's <acronym>POM</acronym> files become more substantial,
    they hold an entirely different kind of information from the build file of
    a similarly sized project using Ant. Maven <acronym>POM</acronym>s contain
    declarations: "This is a <acronym>JAR</acronym> project", and "The source
    code is in <filename>src/main/java</filename>". Ant build files contain
    explicit instructions: "This is project", "The source is in
    <filename>src/main/java</filename>", "Run javac against this directory",
    "Put the results in <filename>target/classes</filename>", "Create a
    <acronym>JAR</acronym> from the ....", etc. Where Ant had to be explicit
    about the process, there was something "built-in" to Maven that just knew
    where the source code was and how it should be processed.</para>

    <para>The differences between Ant and Maven in this example are:</para>

    <para><variablelist>
        <varlistentry>
          <term>Apache Ant</term>

          <listitem>
            <para><itemizedlist>
                <listitem>
                  <para>Ant doesn't have formal conventions like a common
                  project directory structure or default behavior. You have to
                  tell Ant <emphasis>exactly</emphasis> where to find the
                  source and where to put the output. Informal conventions
                  have emerged over time, but they haven't been codified into
                  the product.</para>
                </listitem>

                <listitem>
                  <para>Ant is procedural. You have to tell Ant exactly what
                  to do and when to do it. You have to tell it to compile,
                  then copy, then compress.</para>
                </listitem>

                <listitem>
                  <para>Ant doesn't have a lifecycle. You have to define goals
                  and goal dependencies. You have to attach a sequence of
                  tasks to each goal manually.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Apache Maven</term>

          <listitem>
            <para><itemizedlist>
                <listitem>
                  <para>Maven has conventions. It knows where your source code
                  is because you followed the convention. Maven's Compiler
                  plugin put the bytecode in
                  <filename>target/classes</filename>, and it produces a
                  <acronym>JAR</acronym> file in target.</para>
                </listitem>

                <listitem>
                  <para>Maven is declarative. All you had to do was create a
                  <filename>pom.xml</filename> file and put your source in the
                  default directory. Maven took care of the rest.</para>
                </listitem>

                <listitem>
                  <para>Maven has a lifecycle which was invoked when you
                  executed <command>mvn install</command>. This command told
                  Maven to execute a series of sequential lifecycle phases
                  until it reached the install lifecycle phase. As a
                  side-effect of this journey through the lifecycle, Maven
                  executed a number of default plugin goals which did things
                  like compile and create a <acronym>JAR</acronym>.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <para>Maven has built-in intelligence about common project tasks in the
    form of Maven plugins. If you wanted to write and execute unit tests, all
    you would need to do is write the tests, place them in
    <filename>\${basedir}/src/test/java</filename>, add a test-scoped
    dependency on either TestNG or JUnit, and run <command>mvn test</command>.
    If you wanted to deploy a web application and not a
    <acronym>JAR</acronym>, all you would need to do is change your project
    type to <varname>war</varname> and put your docroot in
    <filename>\${basedir}/src/main/webapp</filename>. Sure, you can do all of
    this with Ant, but you will be writing the instructions from scratch. In
    Ant, you would first have to figure out where the JUnit
    <acronym>JAR</acronym> file should be. Then you would have to create a
    classpath that includes the JUnit <acronym>JAR</acronym> file. Then you
    would tell Ant where it should look for test source code, write a goal
    that compiles the test source to bytecode, and execute the unit tests with
    JUnit.</para>

    <para>Without supporting technologies like antlibs and Ivy (even with
    these supporting technologies), Ant has the feeling of a c`ustom
    procedural build. An efficient set of Maven <acronym>POM</acronym>s in a
    project which adheres to Maven's assumed conventions has surprisingly
    little <acronym>XML</acronym> compared to the Ant alternative. Another
    benefit of Maven is the reliance on widely-shared Maven plugins. Everyone
    uses the Maven Surefire plugin for unit testing, and if someone adds
    support for a new unit testing framework, you can gain new capabilities in
    your own build by just incrementing the version of a particular Maven
    plugin in your project's <acronym>POM</acronym>.</para>

    <para>The decision to use Maven or Ant isn't a binary one, and Ant still
    has a place in a complex build. If your current build contains some highly
    customized process, or if you've written some Ant scripts to complete a
    specific process in a specific way that cannot be adapted to the Maven
    standards, you can still use these scripts with Maven. Ant is made
    available as a core Maven plugin. Custom Maven plugins can be implemented
    in Ant, and Maven projects can be configured to execute Ant scripts within
    the Maven project lifecycle.</para>
  </section>
</chapter>
