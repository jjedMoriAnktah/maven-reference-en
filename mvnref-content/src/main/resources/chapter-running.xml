<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.discursive.com/docbook/xml/4.5/docbookx.dtd">
<chapter id="running">
  <title>Running Maven</title>

  <para><indexterm>
      <primary>running Maven</primary>
    </indexterm><indexterm>
      <primary>Apache Maven</primary>

      <secondary>running</secondary>
    </indexterm>This chapter focuses on the various ways in which Maven can be
  customized at runtime. It also provides some documentation of special
  features such as the ability to customize the behavior of the Maven Reactor
  and how to use the Maven Help plugin to obtain information about plugins and
  plugin goals.</para>

  <section id="running-sect-options">
    <title>Maven Command Line Options</title>

    <para><indexterm>
        <primary>command-line options</primary>
      </indexterm><indexterm>
        <primary>Apache Maven</primary>

        <secondary>command-line options</secondary>
      </indexterm>The following sections detail Maven's command line
    options.</para>

    <section id="running-sect-define-prop">
      <title>Defining Properties</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>defining properties</secondary>
        </indexterm>To define a property use the following option on the
      command line:</para>

      <variablelist>
        <varlistentry>
          <term>-D, --define &lt;arg&gt;</term>

          <listitem>
            <para>Defines a system property</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>This is the option most frequently used to customized the behavior
      of Maven plugins. Some examples of using the <command>-D</command>
      command line argument:</para>

      <screen>$ <command>mvn help:describe -Dcmd=compiler:compile</command>
$ <command>mvn install -Dmaven.test.skip=true</command></screen>

      <para>Properties defined on the command line are also available as
      properties to be used in a Maven POM or Maven Plugin. Form more
      information about referencing Maven properties, see <xref
      linkend="resource-filtering" />.</para>

      <para>Properties can also be used to activate build profiles. For more
      information about Maven build profiles, see <xref
      linkend="profiles" />.</para>
    </section>

    <section id="running-sect-help-option">
      <title>Getting Help</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>getting help</secondary>
        </indexterm>To list the available command line parameters, use the
      following command line option:</para>

      <variablelist>
        <varlistentry>
          <term>-h, --help</term>

          <listitem>
            <para>Display help information</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Executing Maven with this option produces the following
      output:</para>

      <screen>$ <command>mvn --help</command>

usage: mvn [options] [&lt;goal(s)&gt;] [&lt;phase(s)&gt;]

Options:
 -am,--also-make                        If project list is specified, also
                                        build projects required by the
                                        list
 -amd,--also-make-dependents            If project list is specified, also
                                        build projects that depend on
                                        projects on the list
 -B,--batch-mode                        Run in non-interactive (batch)
                                        mode
 -C,--strict-checksums                  Fail the build if checksums don't
                                        match
 -c,--lax-checksums                     Warn if checksums don't match
 -cpu,--check-plugin-updates            Force upToDate check for any
                                        relevant registered plugins
 -D,--define &lt;arg&gt;                      Define a system property
 -e,--errors                            Produce execution error messages
 -emp,--encrypt-master-password &lt;arg&gt;   Encrypt master security password
 -ep,--encrypt-password &lt;arg&gt;           Encrypt server password
 -f,--file                              Force the use of an alternate POM
                                        file.
 -fae,--fail-at-end                     Only fail the build afterwards;
                                        allow all non-impacted builds to
                                        continue
 -ff,--fail-fast                        Stop at first failure in
                                        reactorized builds
 -fn,--fail-never                       NEVER fail the build, regardless
                                        of project result
 -gs,--global-settings &lt;arg&gt;            Alternate path for the global
                                        settings file
 -h,--help                              Display help information
 -N,--non-recursive                     Do not recurse into sub-projects
 -npr,--no-plugin-registry              Don't use
                                        ~/.m2/plugin-registry.xml for
                                        plugin versions
 -npu,--no-plugin-updates               Suppress upToDate check for any
                                        relevant registered plugins
 -o,--offline                           Work offline
 -P,--activate-profiles &lt;arg&gt;           Comma-delimited list of profiles
                                        to activate
 -pl,--projects &lt;arg&gt;                   Build specified reactor projects
                                        instead of all projects
 -q,--quiet                             Quiet output - only show errors
 -r,--reactor                           Dynamically build reactor from
                                        subdirectories
 -rf,--resume-from &lt;arg&gt;                Resume reactor from specified
                                        project
 -s,--settings &lt;arg&gt;                    Alternate path for the user
                                        settings file
 -U,--update-snapshots                  Forces a check for updated
                                        releases and snapshots on remote
                                        repositories
 -up,--update-plugins                   Synonym for cpu
 -V,--show-version                      Display version information
                                        WITHOUT stopping build
 -v,--version                           Display version information
 -X,--debug                             Produce execution debug output</screen>

      <para>If you are looking for information about the goals and parameters
      available from a specific Maven plugin, see <xref
      linkend="installation-sect-help-plugin-install" />.</para>
    </section>

    <section id="running-sect-profile-option">
      <title>Using Build Profiles</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>activating build profiles</secondary>
        </indexterm>To activate one or more build profiles from the command
      line, use the following option:</para>

      <variablelist>
        <varlistentry>
          <term>-P, --activate-profiles &lt;arg&gt;</term>

          <listitem>
            <para>Comma-delimited list of profiles to activate</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>For more information about build profiles, see <xref
      linkend="profiles" />.</para>
    </section>

    <section id="running-sect-version-option">
      <title>Displaying Version Information</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>displaying version information</secondary>
        </indexterm>To display Maven version information, use one of the
      following options on the command line:</para>

      <variablelist>
        <varlistentry>
          <term>-V, --show-version</term>

          <listitem>
            <para>Display version information WITHOUT stopping build</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-v, --version</term>

          <listitem>
            <para>Display version information</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Both of these options produce the same version information output,
      but the -v option will terminate the Maven process after printing out
      the version. You would use the -V option if you wanted to have the Maven
      version information present at the beginning of your build's output.
      This can come in handy if you are running Maven in a continuous build
      environment and you need to know what version of Maven was used for a
      particular build.</para>

      <example>
        <title>Maven Version Information</title>

        <screen>$ <command>mvn -v</command>
Apache Maven 2.2.1 (r801777; 2009-08-06 14:16:01-0500)
Java version: 1.6.0_15
Java home: /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home
Default locale: en_US, platform encoding: MacRoman
OS name: "mac os x" version: "10.6.1" arch: "x86_64" Family: "mac"
</screen>
      </example>
    </section>

    <section id="running-sect-offline-option">
      <title>Running in Offline Mode</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>running in offline mode</secondary>
        </indexterm><indexterm>
          <primary>offline mode</primary>
        </indexterm>If you ever need to use Maven without having access to a
      network, you should use the following option to prevent any attempt to
      check for updates to plugins or dependencies over a network:</para>

      <variablelist>
        <varlistentry>
          <term>-o, --offline</term>

          <listitem>
            <para>Work offline</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>When running with the offline option enabled, Maven will not
      attempt to connect to a remote repository to retrieve artifacts.</para>
    </section>

    <section id="running-sect-custom-locations-option">
      <title>Using a Custom POM or Custom Settings File</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>using custom POM</secondary>
        </indexterm><indexterm>
          <primary>command-line options</primary>

          <secondary>using custom settings</secondary>
        </indexterm>If you don't like the <filename>pom.xml</filename> file
      name, the location of your user-specific Maven settings, or the default
      location of your global settings file, you can customize any of these
      things with the following options:</para>

      <variablelist>
        <varlistentry>
          <term>-f, --file &lt;file&gt;</term>

          <listitem>
            <para>Forces the use of an alternate POM file</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-s,--settings &lt;arg&gt;</term>

          <listitem>
            <para>Alternate path for the user settings file</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-gs, --global-settings &lt;file&gt;</term>

          <listitem>
            <para>Alternate path for the global settings file</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="running-sect-encrypt-option">
      <title>Encrypting Passwords</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>encrypting passwords</secondary>
        </indexterm><indexterm>
          <primary>encrypting passwords</primary>
        </indexterm>The following commands allow you to use Maven to encrypt
      passwords for storage in a Maven settings file:</para>

      <variablelist>
        <varlistentry>
          <term>-emp, --encrypt-master-password &lt;password&gt;</term>

          <listitem>
            <para>Encrypt master security password</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-ep, --encrypt-password &lt;password&gt;</term>

          <listitem>
            <para>Encrypt server password</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Encrypting passwords is documented in <xref
      linkend="appendix-settings-sect-encrypting-passwords" />.</para>
    </section>

    <section id="running-sect-failure-option">
      <title>Dealing with Failure</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>failure modes</secondary>
        </indexterm>The following options control how Maven reacts to a build
      failure in the middle of a multi-module project build:</para>

      <variablelist>
        <varlistentry>
          <term>-fae, --fail-at-end</term>

          <listitem>
            <para>Only fail the build afterwards; allow all non-impacted
            builds to continue</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-ff, --fail-fast</term>

          <listitem>
            <para>Stop at first failure in reactorized builds</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-fn, --fail-never</term>

          <listitem>
            <para>NEVER fail the build, regardless of project result</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The <command>-fn</command> and <command>-fae</command> options are
      useful options for multi-module builds that are running within a
      continuous integration tool like Hudson. The <command>-ff</command>
      option is very useful for developers running interactive builds who want
      to have rapid feedback during the development cycle.</para>
    </section>

    <section id="running-sect-verbose-option">
      <title>Controlling Maven's Verbosity</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>verbosity</secondary>
        </indexterm><indexterm>
          <primary>verbose output</primary>
        </indexterm>If you want to control Maven's logging level, you can use
      one of the following three command line options:</para>

      <variablelist>
        <varlistentry>
          <term>-e, --errors</term>

          <listitem>
            <para>Produce execution error messages</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-X, --debug</term>

          <listitem>
            <para>Produce execution debug output</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-q, --quiet</term>

          <listitem>
            <para>Quiet output - only show errors</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The <command>-q</command> option only prints a message to the
      output if there is an error or a problem.</para>

      <para>The <command>-X</command> option will print an overwhelming amount
      of debugging log messages to the output. This option is primarily used
      by Maven developers and by Maven plugin developers to diagnose problems
      with Maven code during development. This <command>-X</command> option is
      also very useful if you are attempting to diagnose a difficult problem
      with a dependency or a classpath.</para>

      <para>The <command>-e</command> option will come in handy if you are a
      Maven developer, or if you need to diagnose an error in a Maven plugin.
      If you are reporting an unexpected problem with Maven or a Maven plugin,
      you will want to pass both the <command>-X</command> and
      <command>-e</command> options to your Maven process.</para>
    </section>

    <section id="running-sect-batch-option">
      <title>Running Maven in Batch Mode</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>batch mode</secondary>
        </indexterm><indexterm>
          <primary>batch mode</primary>
        </indexterm>To run Maven in batch mode use the following
      option:</para>

      <variablelist>
        <varlistentry>
          <term>-B, --batch-mode</term>

          <listitem>
            <para>Run in non-interactive (batch) mode</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Batch mode is essential if you need to run Maven in a
      non-interactive, continuous integration environment. When running in
      non-interactive mode, Maven will never stop to accept input from the
      user. Instead, it will use sensible default values when it requires
      input.</para>
    </section>

    <section id="running-sect-deps-option">
      <title>Downloading and Verifying Dependencies</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>verifying checksums</secondary>
        </indexterm><indexterm>
          <primary>command-line options</primary>

          <secondary>updating snapshots</secondary>
        </indexterm>The following command line options affect the way that
      Maven will interact with remote repositories and how it verifies
      downloaded artifacts:</para>

      <variablelist>
        <varlistentry>
          <term>-C, --strict-checksums</term>

          <listitem>
            <para>Fail the build if checksums don't match</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-c, --lax-checksums</term>

          <listitem>
            <para>Warn if checksums don't match</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-U, --update-snapshots</term>

          <listitem>
            <para>Forces a check for updated releases and snapshots on remote
            repositories</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>If you are concerned about security, you will want to run Maven
      with the <command>-C</command> option. Maven repositories maintain an
      MD5 and SHA1 checksum for every artifact stored in a repository. Maven
      is configured to warn the end-user if an artifact's checksum doesn't
      match the downloaded artifact. Passing in the <command>-C</command>
      option will cause Maven to fail the build if it encounters an artifact
      with a bad checksum.</para>

      <para>The <command>-U</command> option is useful if you want to make
      sure that Maven is checking for the latest versions of all SNAPSHOT
      dependencies.</para>
    </section>

    <section>
      <title id="running-sect-plugup-option">Controlling Plugin
      Updates</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>plugin updates</secondary>
        </indexterm>The following command line options tell Maven how it
      should update (or not update) Maven plugins from remote
      repositories:</para>

      <variablelist>
        <varlistentry>
          <term>-npu, --no-plugin-updates</term>

          <listitem>
            <para>Suppress upToDate check for any relevant registered plugins.
            Providing this option will have the affect of stabilizing Maven on
            all of the plugins versions that are currently available in a
            local Maven repository. With <varname>-npu</varname> active, Maven
            will not consult the remote repository for newer Maven
            versions.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-cpu, --check-plugin-updates</term>

          <listitem>
            <para>Force upToDate check for any relevant registered plugins.
            Forces Maven to check for the latest released version of a Maven
            plugin. Not that this will not affect your build if you are
            explicitly specifying versions for Maven plugins in your project's
            POM.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-up, --update-plugins</term>

          <listitem>
            <para>Synonym for cpu.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>There following command line option that affects the way Maven
      downloads plugins from a remote repository:</para>

      <variablelist>
        <varlistentry>
          <term>-npr, --no-plugin-registry</term>

          <listitem>
            <para>Don't use ~/.m2/plugin-registry.xml for plugin
            versions.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>When preset, the <command>-npr</command> command line option will
      tell Maven not to consult the Plugin Registry. For more information
      about the Plugin Registry, go here: <ulink
      url="http://maven.apache.org/guides/introduction/introduction-to-plugin-registry.html">http://maven.apache.org/guides/introduction/introduction-to-plugin-registry.html</ulink>.</para>
    </section>

    <section id="running-sect-norecurse-option">
      <title>Non-recursive Builds</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>non-recursive build</secondary>
        </indexterm><indexterm>
          <primary>non-recursive build</primary>
        </indexterm>There will be times when you simply want to run a Maven
      build without having Maven descend into all of a project's submodules.
      You can do this by using the following command line option:</para>

      <variablelist>
        <varlistentry>
          <term>-N, --non-recursive</term>

          <listitem>
            <para>Prevents Maven from building submodules. Only builds the
            project contained in the current directory.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Running this will only cause Maven to execute a goal or step
      through the lifecycle for the project in the current directory. Maven
      will not attempt to build all of the projects in a multi-module project
      when you use the <command>-N</command> command line option.</para>
    </section>
  </section>

  <section>
    <title>Using Advanced Reactor Options</title>

    <para><indexterm>
        <primary>command-line options</primary>

        <secondary>advanced reactor options</secondary>
      </indexterm><indexterm>
        <primary>make-like builds</primary>
      </indexterm><indexterm>
        <primary>advanced reactor options</primary>
      </indexterm>Starting with the Maven 2.1 release, there are new Maven
    command line options which allow you to manipulate the way that Maven will
    build multimodule projects. These new options are:</para>

    <variablelist>
      <varlistentry>
        <term>-rf, --resume-from</term>

        <listitem>
          <para>Resume reactor from specified project</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-pl, --projects</term>

        <listitem>
          <para>Build specified reactor projects instead of all
          projects</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-am, --also-make</term>

        <listitem>
          <para>If project list is specified, also build projects required by
          the list</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>-amd, --also-make-dependents</term>

        <listitem>
          <para>If project list is specified, also build projects that depend
          on projects on the list</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section id="running-sect-downloading-aro">
      <title>Advanced Reactor Options Example Project</title>

      <para>The example in this section is a skeleton of a complex multimodule
      project that is used to illustrate the advanced reactor options. While
      it is possible to read this section without the example code, you might
      want to download the example code and follow along, experimenting with
      the various options as you learn how to use the advanced reactor
      options. This section’s example project may be downloaded with the
      book’s example code at:</para>

      <screen>${examples.download.url}</screen>

      <para>Unzip this archive in any directory, and then go to the
      <filename>ch-running/</filename> directory. There you will see a
      directory named <filename>sample-parent/</filename>. All of the examples
      in this section will be executed from the
      <filename>examples/ch-running/sample-parent/</filename> directory in the
      examples distribution. The sample-parent/ directory contains the
      multimodule project structure shown in <xref
      linkend="fig-running-aro-dir-struct" />.</para>

      <figure id="fig-running-aro-dir-struct">
        <title>Directory Structure of Sample Multi-module Project</title>

        <mediaobject>
          <imageobject role="web" userlevel="">
            <imagedata fileref="figs/web/running_aro-project-dir.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/running_aro-project-dir.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>This project approximates the structure of a real-world enterprise
      project: the <varname>sample-model</varname> project contains a set of
      foundational model objects used throughout the system, the
      <varname>sample-util</varname> project would contain utility code, the
      <varname>sample-persist</varname> project would contain logic that deals
      with persisting objects to a database, and the other projects would all
      be combined to produce the various GUI and Web-based interfaces that
      comprise a very complex system. <xref
      linkend="fig-running-aro-depends" /> captures the dependencies between
      each of these sample modules.</para>

      <figure id="fig-running-aro-depends">
        <title>Dependencies within Sample Multi-module Project</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/running_aro-dependencies.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata fileref="figs/print/running_aro-dependencies.pdf" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>If you go into the <filename>sample-parent/</filename> project
      directory and run <command>mvn clean</command>, you will see that the
      Maven Reactor reads all of the project dependencies and comes up with
      the following build order for these projects as shown in <xref
      linkend="ex-running-aro-order" />.</para>

      <example id="ex-running-aro-order">
        <title>Order of Project Builds in Maven Reactor</title>

        <screen>[INFO] Reactor build order: 
[INFO]   sample-parent
[INFO]   sample-model
[INFO]   sample-persist
[INFO]   sample-services
[INFO]   sample-util
[INFO]   sample-security
[INFO]   sample-admin-webapp
[INFO]   sample-webapp
[INFO]   sample-rest
[INFO]   sample-client-connector
[INFO]   sample-gui
[INFO]   sample-admin-gui</screen>
      </example>
    </section>

    <section>
      <title>Resuming Builds</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>resuming builds</secondary>
        </indexterm>The <command>-rf</command> or
      <command>--resume-from</command> option can come in handy if you want to
      tell the Maven Reactor to resume a build from a particular project. This
      can be useful if you are working with a large multimodule project and
      you want to restart a build at a particular project in the Reactor
      without running through all of the projects that precede it in the build
      order.</para>

      <para>Assume that you are working on the multi-module project with the
      build order shown in <xref linkend="ex-running-aro-order" /> and that
      your build ran successfully up until Maven encountered a failing unit
      test in <varname>sample-client-connector</varname>. With the
      <command>-rf</command> option, you can fix the unit test in
      <varname>simple-client-connector</varname> and then run <command>mvn -rf
      sample-client-connect</command> from the
      <filename>sample-parent/</filename> directory to resume the build with
      the final three projects.</para>

      <screen>$ <command>mvn --resume-from sample-client-connector install</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   sample-client-connector
[INFO]   sample-gui
[INFO]   sample-admin-gui
...</screen>
    </section>

    <section>
      <title>Specifying a Subset of Projects</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>building a subset of projects</secondary>
        </indexterm>The <command>-pl</command> or
      <command>--projects</command> option allows you to select a list of
      projects from a multimodule project. This option can be useful if you
      are working on a specific set of projects, and you'd rather not wait for
      a full build of a multi-module project during a development
      cycle.</para>

      <para>Assume that you are working on the multi-module project with the
      build order shown in <xref linkend="ex-running-aro-order" /> and that
      you are a developer focused on the <varname>sample-rest</varname> and
      <varname>sample-client-connector</varname> projects. If you only wanted
      Maven to build the <varname>sample-rest</varname> and
      <varname>sample-client-connector</varname> project, you would use the
      following syntax from the <filename>sample-parent/</filename>
      directory:</para>

      <screen>$ <command>mvn --projects sample-client-connector,sample-rest install</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   sample-rest
[INFO]   sample-client-connector
<command></command></screen>
    </section>

    <section id="running-sect-make-subset">
      <title>Making a Subset of Projects</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>making subsets</secondary>
        </indexterm>If you wanted to run a portion of the larger build, you
      would use the <command>-pl</command> or <command>--projects</command>
      option with the <command>-am</command> or <command>--also-make
      option</command>. When you specify a project with the
      <command>-am</command> option, Maven will build all of the projects that
      the specified project depends upon (either directly or indirectly).
      Maven will examine the list of projects and walk down the dependency
      tree, finding all of the projects that it needs to build.</para>

      <para>If you are working on the multi-module project with the build
      order shown in <xref linkend="ex-running-aro-order" /> and you were only
      interested in working on the <varname>sample-services</varname> project,
      you would run <command>mvn -pl simple-services -am</command> to build
      only those projects</para>

      <screen>$ <command>mvn --projects sample-services --also-make install</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   sample-parent
[INFO]   sample-model
[INFO]   sample-persist
[INFO]   sample-services</screen>
    </section>

    <section>
      <title>Making Project Dependents</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>making dependents</secondary>
        </indexterm>While the <command>-am</command> command makes all of the
      projects required by a particular project in a multi-module build, the
      <command>-amd</command> or <command>--also-make-dependents</command>
      option configures Maven to build a project and any project that depends
      on that project. When using <command>--also-make-dependents</command>,
      Maven will examine all of the projects in our reactor to find projects
      that depend on a particular project. It will automatically build those
      projects and nothing else.</para>

      <para>If you are working on the multi-module project with the build
      order shown in <xref linkend="ex-running-aro-order" /> and you wanted to
      make sure that your changes to <varname>sample-services</varname> did
      not introduce any errors into the projects that directly or indirectly
      depend on <varname>sample-services</varname>, you would run the
      following command:</para>

      <para><screen>$ <command>mvn --projects sample-services --also-make-dependents install</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   sample-services
[INFO]   sample-admin-webapp
[INFO]   sample-webapp
[INFO]   sample-rest
</screen></para>
    </section>

    <section id="running-sect-resuming">
      <title>Resuming a "make" build</title>

      <para><indexterm>
          <primary>command-line options</primary>

          <secondary>resuming a make-like build</secondary>
        </indexterm>When using <command>--also-make</command>, Maven will
      execute a subset of the larger build as shown in <xref
      linkend="running-sect-make-subset" />. Combining
      <command>--project</command>, <command>--also-make</command>, and
      <command>--resume-from</command> provides you with the ability to refine
      your build even further. The <command>-rf</command> or
      <command>--resume-from</command> resumes the build from a specific point
      in the Reactor build order.</para>

      <screen>$ <command>mvn --projects sample-webapp --also-make \
      --resume-from sample-services install</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   sample-services
[INFO]   sample-util
[INFO]   sample-security
[INFO]   sample-webapp</screen>

      <para>In this example, the build is resumed from
      <varname>sample-services</varname> which omits the
      <varname>sample-persist</varname> and <varname>sample-model</varname>
      projects from the build. If you are focused on individual components and
      you need to accelerate your build times, using these advanced reactor
      options together is a great way to skip portions of your large
      multi-module project build. The <command>--resume-from</command>
      argument also works with
      <command>--also-make-dependents</command>.</para>
    </section>
  </section>

  <section id="installation-sect-help-plugin-install">
    <title>Using the Maven Help Plugin</title>

    <para><indexterm>
        <primary>Help plugin</primary>

        <secondary>using</secondary>
      </indexterm>Throughout this book, we introduce Maven plugins, talking
    about Maven Project Object Model (<acronym>POM</acronym>) files, settings
    files, and profiles. There are going to be times when you need a tool to
    help you make sense of some of the models that Maven is using and what
    goals are available on a specific plugin. The Maven Help plugin allows you
    to list active Maven profiles, display an effective
    <acronym>POM</acronym>, print the effective settings, or list the
    attributes of a Maven plugin.</para>

    <para>The Maven Help plugin has four goals. The first three
    goals—<varname>active-profiles</varname>,
    <varname>effective-pom</varname>, and
    <varname>effective-settings</varname>—describe a particular project and
    must be run in the base directory of a project. The last
    goal—<varname>describe</varname>—is slightly more complex, showing you
    information about a plugin or a plugin goal. The following commands
    provide some general information about the four goals:</para>

    <variablelist>
      <varlistentry>
        <term>help:active-profiles</term>

        <listitem>
          <para><indexterm>
              <primary>Help plugin</primary>

              <secondary>active-profiles goal</secondary>
            </indexterm><indexterm>
              <primary>listing active profiles</primary>
            </indexterm>Lists the profiles (project, user, global) which are
          active for the build.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help:effective-pom</term>

        <listitem>
          <para><indexterm>
              <primary>Help plugin</primary>

              <secondary>effective-pom goal</secondary>
            </indexterm><indexterm>
              <primary>effective POM</primary>
            </indexterm>Displays the effective <acronym>POM</acronym> for the
          current build, with the active profiles factored in.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help:effective-settings</term>

        <listitem>
          <para><indexterm>
              <primary>Help plugin</primary>

              <secondary>effective-settings goal</secondary>
            </indexterm><indexterm>
              <primary>effective Maven settings</primary>
            </indexterm>Prints out the calculated settings for the project,
          given any profile enhancement and the inheritance of the global
          settings into the user-level settings.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>help:describe</term>

        <listitem>
          <para><indexterm>
              <primary>Help plugin</primary>

              <secondary>describe goal</secondary>
            </indexterm>Describes the attributes of a plugin. This need not
          run under an existing project directory. You must at least give the
          <varname>groupId</varname> and <varname>artifactId</varname> of the
          plugin you wish to describe.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section id="installation-sect-describing-plugin">
      <title>Describing a Maven Plugin</title>

      <para><indexterm>
          <primary>Help plugin</primary>

          <secondary>describe goal</secondary>
        </indexterm><indexterm>
          <primary>plugin documentation</primary>
        </indexterm>Once you start using Maven, you'll spend most of your time
      trying to get more information about Maven Plugins: How do plugins work?
      What are the configuration parameters? What are the goals? The
      <varname>help:describe</varname> goal is something you'll be using very
      frequently to retrieve this information. With the
      <varname>plugin</varname> parameter you can specify a plugin you wish to
      investigate, passing in either the plugin prefix (e.g.
      <varname>maven-help-plugin</varname> as <varname>help</varname>) or the
      <varname>groupId:artifact[:version]</varname>, where version is
      optional. For example, the following command uses the Help plugin's
      <varname>describe</varname> goal to print out information about the
      Maven Help plugin.</para>

      <screen>$ <command>mvn help:describe -Dplugin=help</command>
...
Group Id:  org.apache.maven.plugins
Artifact Id: maven-help-plugin
Version:     2.0.1
Goal Prefix: help
Description:

The Maven Help plugin provides goals aimed at helping to make sense out of
    the build environment. It includes the ability to view the effective
    POM and settings files, after inheritance and active profiles
    have been applied, as well as a describe a particular plugin goal to give 
    usage information.
...
</screen>

      <para>Executing the <varname>describe</varname> goal with the
      <varname>plugin</varname> parameter printed out the Maven coordinates
      for the plugin, the goal prefix, and a brief description of the plugin.
      While this information is helpful, you'll usually be looking for more
      detail than this. If you want the Help plugin to print a full list of
      goals with parameters, execute the <varname>help:describe</varname> goal
      with the parameter <varname>full</varname> as follows:</para>

      <screen>$ <command>mvn help:describe -Dplugin=help -Dfull</command>
...
Group Id:  org.apache.maven.plugins
Artifact Id: maven-help-plugin
Version:     2.0.1
Goal Prefix: help
Description:

The Maven Help plugin provides goals aimed at helping to make sense out of
    the build environment. It includes the ability to view the effective
    POM and settings files, after inheritance and active profiles
    have been applied, as well as a describe a particular plugin goal to 
    give usage information.

Mojos:

===============================================
Goal: 'active-profiles'
===============================================
Description:

Lists the profiles which are currently active for this build.

Implementation: org.apache.maven.plugins.help.ActiveProfilesMojo
Language: java

Parameters:
-----------------------------------------------

[0] Name: output
Type: java.io.File
Required: false
Directly editable: true
Description:

This is an optional parameter for a file destination for the output of 
this mojo...the listing of active profiles per project.

-----------------------------------------------

[1] Name: projects
Type: java.util.List
Required: true
Directly editable: false
Description:

This is the list of projects currently slated to be built by Maven.

-----------------------------------------------

This mojo doesn't have any component requirements.
===============================================

... removed the other goals ...
</screen>

      <para>This option is great for discovering all of a plugin's goals as
      well as their parameters. But sometimes this is far more information
      than necessary. To get information about a single goal, set the
      <varname>mojo</varname> parameter as well as the
      <varname>plugin</varname> parameter. The following command lists all of
      the information about the Compiler plugin's <varname>compile</varname>
      goal.</para>

      <screen>$ <command>mvn help:describe -Dplugin=compiler -Dmojo=compile -Dfull</command></screen>
    </section>
  </section>
</chapter>
